{
  "start": "February 19, 2019",
  "title": "Control flow on Javascript",
  "author": "Ricardo Moreira",
  "thumbnail": "https://res.cloudinary.com/mugas/image/upload/v1590572247/0_j4D5LqbEpwLgpIxE_snieg2.jpg",
  "excerpt": "If statements and much more",
  "body": "> One of the most famous poets from Portugal has a sentence that is: Primeiro estranha-se, depois entranha-se, that in English is something like first it feels weird but then you feel it in you. That has been my experience with Javascript since the beginning. It started something that just felt weird but with time, it got on me and now I just want to know more and more and practice more and more.\n>\n> That being said I decided to write posts about Javascript topics. By writing it here I learn it better and you will also find something useful out of it. Because I am a code newbie and mostly I write these posts for other code newbies it might be that some things seem easy, even for me and you, but it just to get a ground start and to not jump over bit subjects in a topic.\n>\n> The first one of this long series is going to be about **Control flow in Javascript.**\n>\n> Control flow is in computer science the order that the instructions or statements or functions are executed. In javascript, we read the code starting from the first line till the last line unless of course in the code there is some instructions or statements that changes that control flow.\n>\n> The most known control flow used I would think is the if statement that we used many of our code. For example, you want a website to show some page if you are older than 18, if not, the website would render a different page is a traditional example of a control flow/ conditional example\n>\n> **NOTE**: Loops are a big part of control flow statement but because I want to write a post only about loops, even that I am going to mention and use them on the examples it will not be my main focus.\n>\n> ### **BLOCK**\n>\n> The block statement per se doesnâ€™t change the control flow but is used to group statements. The block is set by a pair of curly brackets.\n>\n> ```javascript\n> {\n> first statement;\n> second statement;\n> ...\n> }\n> ```\n>\n> One good example to when use statement is with the if statement.\n>\n> ### **BREAK**\n\n\n\nBreak as the name implies, breaks. Breaks what? Breaks the statement or in normally the cases break the loop.\n\nSee the next example:\n\n```javascript\nfor (let i = 0; i < 5; i++) {\n  if (i === 3) {\n    break;\n  }\n  console.log(i);\n}\n//excepted output : 0,1,2\n```\n\n\n\nIn this loop, if we take the break out, the loop it iterates thru all value from 0 to 4. But because we have a break on 3, it will only iterate from 0 to 2.\n\n\n\nBasically, this condition says if*i*is equal to 3 then break and stop the loop there.\n\nWe also can use it to give more information to the user. If we want a function that wants to loops over some numbers and breaks when a certain condition is met and print that info about it. In this case, we would like that it will loop till a certain number has the division remainder 0 when divided by 3 but also by 5 and would like to print that info.\n\n```javascript\nfor (let i = 5; i < 50; i++) {\n  if (i % 3 === 0 && i % 5 === 0) {\n    console.log(`The division reminder of the number ${i} is 0`);\n    break;\n  }\n  console.log(i);\n}\nexpected output :\n5 \n6\n7\n8\n9\n10\n11\n12\n13\n14\nThe division reminder of the number 15 is 0\n```\n\n\n\nUseful right?\n\n\n\n\n\nCONTINUE",
  "tags": [
    "javascript"
  ]
}
{
  "start": "July 22, 2020",
  "title": "API request with Axios",
  "author": "Ricardo Moreira",
  "thumbnail": "https://res.cloudinary.com/mugas/image/upload/v1595401324/nasaapi_lgixoe.png",
  "excerpt": "Make a get request from Nasa API",
  "body": "![]()\n\nWorking with Apis can be a challenge but it's for sure something you want to work on and want to learn. \n\nBut I know(at least for me) when you start working/learning them it seems a total new world in top on the Javascript( in our case) world. There are so many APIs, some free, other no, some require some key others don't. Then how you get the data? You can go with Axios or fetch... So many options and way to do it that when you start you don't know where to start.\n\n**So let's get a small win.**  \n\nI will go back in the future to API with a full explanation of how to work with them, and all options. but for the sake of this post we only going to do some get requests and render them on the page using Axios. We do all that using [Nasa Api](https://api.nasa.gov/)\n\nSo this is what we will cover in this posts:\n\n* What is an API\n* Why Axios\n* Make a get request\n* Render the data in the page\n* Hide Api keys\n\nSo ready to go to moon and back?\n\n## Links\n\n* [Project page](https://https://nasaapiaxios.netlify.app/)\n* [GitHub page](https://github.com/mugas/Movie-hero)\n* [Code Pen](https://codepen.io/collection/DrpKdj)\n* You also can read it [here](https://dev.to/mugas/flip-cards-with-javascript-2ad0) and [here](<>)\n\n## **What is an API?**\n\nAPI stands for Application Programming Interface and can be defined as what let's one application talk with another application.\n\nSo keeping it simple any type you share something from one site(app) to another you are in someway using an app. You have your website and want to display there all your posts in some social media app. How you do that? Yes with an API. Many of those API follow a set of rules that make them REST API. **REST** stands for Representational State Transfer and these are some of the \"rules\" that make an API a REST API:\n\n1. Client Server Based\n2. Statelessness\n3. Layered System\n4. Caching\n5. Uniform Design\n6. Code on Demand\n\nWe will not focus on each point but the idea is the API can be accessed by a url, and in that url is data that you can access. Most of the times that data returns in JSON (not always), but we go more on that in a moment. \n\nAll around internet there are many companies, websites, governments that have their data available for you to access and they do that in an API and that's exactly what we are going to do.  There are many APIs in Nasa  API [website](https://api.nasa.gov/).\nFor this tutorial we are going to get the Image of the day and the weather from Mars, in case you are thinking to go there on vacations some day.\n\n## **Why Axios?**\n\nSo you might have heard that you need to make a request to get the API and that request can be made with `fetch` or `axios` for example.\nBoth of them can make a http request, but with fetch, you have to transform the JSON data and with Axios you don't need.Also axios is more well supported even in old browsers but can be easily be done with fetch.\nTo start running and see something done when you dive in the world of APIs, axios is a good way to start and we are going to use it.\nReady? Let's start\n\nTo focus only on the API, I will skip the CSS explanation (the code will be available of course) unless is something relevant for API explanation.\nTo start using the Axios you can use it via cdn\n\n```js\nhttps://unpkg.com/axios/dist/axios.min.js\n```\n\nJust put that in your html down in the body \n\n## **Make a get request**\n\nTo make a get request with axios we use the following syntax:\n\n```js\naxios.get(\"url\")\n.then(function (response){\nconsole.log(response)\n;\n})\n.catch(function(error){\nconsole.log(error);\n});\n```\n\nThis can be a mouthfull if you are starting with JS or API so I try to break it down. Axios returns a promise and the way we can deal with promises is with `then`and `catch`. With the first one in case the request has been successful, \"then\" you get a response. If by any chance there is some error in the promise( promise is rejected) we can \"catch\" the error.\n\nNow let's get the data and render in on the page\n\nOur html\n\n```html\n<section id=\"control-center\">\n      <h1 class=\"control-center__title\">Nasa Image of the day</h1>\n      <h2 class=\"picture-name\"></h2>\n      <figure class=\"daily-image\">\n        <figcaption></figcaption>\n      </figure>\n      <h3 class=\"mars__title\">Weather in Mars</h3>\n      <section class=\"mars__container\">\n        <div class=\"mars__today\">\n          <div class=\"mars__today-data\">\n            <span class=\"mars__info\">Mars today</span>\n            <br />\n          </div>\n          <button id=\"btn__today\">Today Mars Weather</button>\n        </div>\n        <div class=\"mars__tomorrow\">\n          <div class=\"mars__tomorrow-data\">\n            <span class=\"mars__info\">Mars tomorrow </span>\n            <br />\n          </div>\n          <button id=\"btn__tomorrow\">Tomorrow Mars weather</button>\n        </div>\n        <div class=\"mars__info\">\n          <div class=\"mars__info-data\">\n            <span class=\"mars__info\">Mars in 2 days</span>\n            <br />\n          </div>\n          <button id=\"btn__nextDay\">Mars in two days</button>\n        </div>\n      </section>\n      <p class=\"mars-weather\"></p>\n    </section>\n```\n\nOur CSS\n\n```css\nbody {\n  background: #eceee5;\n}\n\n.control-center__title,\n.mars__title {\n  color: #a64e43;\n  text-align: center;\n  font-family: cursive;\n  font-size: 50px;\n  margin: 0;\n}\n\nimg {\n  width: 90%;\n  height: 400px;\n  border-radius: 40px;\n}\n\n.picture-name {\n  text-align: center;\n  color: #6a7b9c;\n}\n\n.daily-image {\n  text-align: center;\n}\n\nbutton {\n  box-shadow: 0px 10px 14px -7px #20263f;\n  background: linear-gradient(to bottom, #7720263f b55a 5%, #72b352 100%);\n  background-color: #20263f;\n  border-radius: 4px;\n  border: 1px solid #6a7b9c;\n  display: inline-block;\n  cursor: pointer;\n  color: #ffffff;\n  font-family: Arial;\n  font-size: 17px;\n  font-weight: bold;\n  padding: 10px 21px;\n  text-decoration: none;\n  text-shadow: 0px 1px 0px #6a7b9c;\n}\n\n.mars__container {\n  display: flex;\n  justify-content: space-around;\n}\n\n.mars__info {\n  color: #20263f;\n  font-size: bold;\n}\n\n.mars__today-data,\n.mars__tomorrow-data,\n.mars__info-data {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: #a64e43;\n  font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\n  font-weight: 700;\n  text-align: center;\n  margin: 0 auto;\n}\n\n.mars__today,\n.mars__tomorrow,\n.mars__info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n```\n\nAnd this is what we end up with:\n\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"dark\" data-default-tab=\"css,result\" data-user=\"mugas\" data-slug-hash=\"WNrPWgg\" data-preview=\"true\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Nasa Api -No js\">\n  <span>See the Pen <a href=\"https://codepen.io/mugas/pen/WNrPWgg\">\n  Nasa Api -No js</a> by Ricardo (<a href=\"https://codepen.io/mugas\">@mugas</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\nGreat, the page is done, let's put our API data there.\n\nIn the Nasa [API](https://api.nasa.gov/) scroll down to *Browse APIs* and press on the first one : **APOD - Astronomy Picture of the Day** and there is the code for the `get request`.\n\nSo with the syntax we saw on top let's create our first request in javascript:\n\n```js\nconst apiPicOfTheDay = axios.get(\"https://api.nasa.gov/planetary/apod?\").then((response) =>{\n  console.log(response)\n}).catch((err)=>{\n  console.log(err)\n})\n\nconsole.log(apiPicOfTheDay)\n```\n\nIf you are doing this in code pen you might have to use the browser console to see, but it we can't see any data right?In fact it returns an error 403(Forbidden). That is most likely because we didn't add any parameters, for example the API_Key. \nApi_Key is what gives you access to the API. Some APIs don't need any key, other need but are free, others you have to pay for it. The most important part is Never give your API_key to no one or let it visible( we will cover that in the end of the tutorial).\nThis API in particularly needs a demo API_key. If you see in the page of the API we have the query parameters we can use and also there is an example query. There you can see that the http request, has the API_key in front. \n\n\n\n![](https://res.cloudinary.com/mugas/image/upload/v1595490341/picOfTheDay_edited_rswqgo.jpg)\n\nBut what if we don't want to put in front of the request like it is on the example?\nWe only need to add it to the parameters like this:\n\n```js\nconst apiPicOfTheDay = axios.get(\"https://api.nasa.gov/planetary/apod?\", {\r\n  params: {\r\n    api_key: \"DEMO_KEY\",\r\n  },\r\n});\n```\nI create a variable named `apiPicOfTheDay `. Like this we can use it again without writing the request again.\n\nLet' see if this now works:\n```js\nconst getImageOfTheDay = () => {\r\n  apiPicOfTheDay\n    .then((response)=>{\n      console.log(response)\n    })\n    .catch((err)=>{\n    console.log(err)\n   })\n}\n\nconsole.log(getImageOfTheDay());\n```\n\nIf you check the console now you have an object. Inside that object there are many properties. Press the one it says data. You see it? There there is the data of this API, including the date, and the url of the image.\nBut we don't need all this info\n\n## **Render the data in the page**\n\nAdd Readme\nresponsive",
  "tags": [
    "javascript",
    "API"
  ]
}
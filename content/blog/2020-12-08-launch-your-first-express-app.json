{
  "start": "December 8, 2020",
  "title": "Launch your first express app ",
  "author": "Ricardo Moreira",
  "thumbnail": "https://res.cloudinary.com/mugas/image/upload/v1607400676/express_tokzco.png",
  "excerpt": "Using pug and deployed in Heroku",
  "body": "Been sometime that I have been working with backend. In fact, when I decided to learn to code 2 years ago, the first course I took was a full stack [one](https://www.udemy.com/course/the-web-developer-bootcamp/),  where I did an app with node and express, but after that I decided to focus more on front-end and never went to that avenue anymore. \n\nNowadays I decided that I want to write more and expand my knowledge so I decided to start writing about new topics or old, but more recurrent. So my first one is going to be about [express.js](https://expressjs.com/).\n\nSo simply express.js is a framework for Node.js. So like in JS you can build a app/webpage with React, Vue, Angular, many others, for the back-end there are also frameworks to work with Node and one of them is express.  I haven't had worked with others, but there is plenty more that you can try (and me also).\n\nWhat about PUG? \n\nThat was a first for me. I saw it many people using in some projects ( Code Pen is full of them), I knew that was a html processor but not much more.\n\n[Pug](https://pugjs.org/api/getting-started.html) is a template engine. In other words makes you write HTML easier and when using dianmyc data is also more user friendly. That means of course that now you have to learn PUG to save time while writing HTML...\n\nI read that when using express, if you create the *express generator* tool, a tool that creates the skeleton of an express app, it comes with jade/pug template already installed so I decided that I wanted to give it a go.\n\nWe are not going to use express generator here as we go build express from the scratch. \n\nSo what we going to build/do? I wanted to create a simple project, but because I am a visual person I needed to see it live. We going to build a simple product page in express.js.    To learn how to use templates in express, we will create the same page in pug.\n\nThen we will deploy it in Heroku.\n\nLet's start.\n\n## Links\n\n* [Project page](https://gscreations-express.herokuapp.com/)\n* [GitHub page](https://github.com/mugas/Blog-Post/tree/master/myexpress)\n* You also can read it [here](https://dev.to/mugas/flip-cards-with-javascript-2ad0) and [here](https://medium.com/@ricardo.d.moreira.rm/flip-cards-with-javascript-e06971d82f50)\n\nYou need to have Node [installed](https://nodejs.org/en/), before we continue. Then create a directory and inside of it run the next commands:\n\n```javascript\n//My directory name is myexpress\ncd myexpress\n\n//Create a package.json\nnpm init\n//!It will ask some questions, you can press RETURN in all. When it comes the name of the file for the entry point, I let mine to be what was suggested index.js. Feel free to change it if you need\n\n//Install express.js\nnpm install express --save\n```\n\nNow we installed express. Create now a file with the same name you gave to the entry point, in my case `index.js` and write the next code:\n\n```js\nconst express = require('express');\n\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\nBefore I explain what this mean, this is how it looks our app tree.\n\n![](https://res.cloudinary.com/mugas/image/upload/c_thumb,w_200,g_face/v1607486146/express1_mk8oy9.png)"
}